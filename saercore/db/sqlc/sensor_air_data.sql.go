// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sensor_air_data.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSensorAir = `-- name: CreateSensorAir :one
INSERT INTO sensor_airs (device_id, temperature, humidity, co2) VALUES ($1, $2, $3, $4) RETURNING id, device_id, temperature, humidity, co2, created_at
`

type CreateSensorAirParams struct {
	DeviceID    string         `db:"device_id" json:"device_id"`
	Temperature pgtype.Numeric `db:"temperature" json:"temperature"`
	Humidity    pgtype.Numeric `db:"humidity" json:"humidity"`
	Co2         pgtype.Numeric `db:"co2" json:"co2"`
}

func (q *Queries) CreateSensorAir(ctx context.Context, arg *CreateSensorAirParams) (*SensorAir, error) {
	row := q.db.QueryRow(ctx, createSensorAir,
		arg.DeviceID,
		arg.Temperature,
		arg.Humidity,
		arg.Co2,
	)
	var i SensorAir
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.Temperature,
		&i.Humidity,
		&i.Co2,
		&i.CreatedAt,
	)
	return &i, err
}

const deleteSensorAir = `-- name: DeleteSensorAir :one
DELETE FROM sensor_airs WHERE id = $1 RETURNING id, device_id, temperature, humidity, co2, created_at
`

func (q *Queries) DeleteSensorAir(ctx context.Context, id pgtype.UUID) (*SensorAir, error) {
	row := q.db.QueryRow(ctx, deleteSensorAir, id)
	var i SensorAir
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.Temperature,
		&i.Humidity,
		&i.Co2,
		&i.CreatedAt,
	)
	return &i, err
}

const getSensorAir = `-- name: GetSensorAir :one
SELECT id, device_id, temperature, humidity, co2, created_at FROM sensor_airs WHERE id = $1
`

func (q *Queries) GetSensorAir(ctx context.Context, id pgtype.UUID) (*SensorAir, error) {
	row := q.db.QueryRow(ctx, getSensorAir, id)
	var i SensorAir
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.Temperature,
		&i.Humidity,
		&i.Co2,
		&i.CreatedAt,
	)
	return &i, err
}

const getSensorAirs = `-- name: GetSensorAirs :many
SELECT id, device_id, temperature, humidity, co2, created_at FROM sensor_airs
`

func (q *Queries) GetSensorAirs(ctx context.Context) ([]*SensorAir, error) {
	rows, err := q.db.Query(ctx, getSensorAirs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*SensorAir{}
	for rows.Next() {
		var i SensorAir
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.Temperature,
			&i.Humidity,
			&i.Co2,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSensorAir = `-- name: UpdateSensorAir :one
UPDATE sensor_airs SET device_id = $2, temperature = $3, humidity = $4, co2 = $5 WHERE id = $1 RETURNING id, device_id, temperature, humidity, co2, created_at
`

type UpdateSensorAirParams struct {
	ID          pgtype.UUID    `db:"id" json:"id"`
	DeviceID    string         `db:"device_id" json:"device_id"`
	Temperature pgtype.Numeric `db:"temperature" json:"temperature"`
	Humidity    pgtype.Numeric `db:"humidity" json:"humidity"`
	Co2         pgtype.Numeric `db:"co2" json:"co2"`
}

func (q *Queries) UpdateSensorAir(ctx context.Context, arg *UpdateSensorAirParams) (*SensorAir, error) {
	row := q.db.QueryRow(ctx, updateSensorAir,
		arg.ID,
		arg.DeviceID,
		arg.Temperature,
		arg.Humidity,
		arg.Co2,
	)
	var i SensorAir
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.Temperature,
		&i.Humidity,
		&i.Co2,
		&i.CreatedAt,
	)
	return &i, err
}
