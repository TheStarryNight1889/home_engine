// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type DeviceType string

const (
	DeviceTypeSENSORAIR  DeviceType = "SENSOR_AIR"
	DeviceTypeSENSORSOIL DeviceType = "SENSOR_SOIL"
)

func (e *DeviceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DeviceType(s)
	case string:
		*e = DeviceType(s)
	default:
		return fmt.Errorf("unsupported scan type for DeviceType: %T", src)
	}
	return nil
}

type NullDeviceType struct {
	DeviceType DeviceType `json:"device_type"`
	Valid      bool       `json:"valid"` // Valid is true if DeviceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDeviceType) Scan(value interface{}) error {
	if value == nil {
		ns.DeviceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DeviceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDeviceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DeviceType), nil
}

type Device struct {
	ID         string             `db:"id" json:"id"`
	LocationID pgtype.UUID        `db:"location_id" json:"location_id"`
	Name       *string            `db:"name" json:"name"`
	Type       DeviceType         `db:"type" json:"type"`
	Version    string             `db:"version" json:"version"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Location struct {
	ID        string             `db:"id" json:"id"`
	Name      *string            `db:"name" json:"name"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type SensorAir struct {
	ID          string             `db:"id" json:"id"`
	DeviceID    string             `db:"device_id" json:"device_id"`
	Temperature pgtype.Numeric     `db:"temperature" json:"temperature"`
	Humidity    pgtype.Numeric     `db:"humidity" json:"humidity"`
	Co2         pgtype.Numeric     `db:"co2" json:"co2"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
}
