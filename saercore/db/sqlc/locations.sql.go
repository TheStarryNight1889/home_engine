// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: locations.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO locations (id, name) VALUES ($1, $2) RETURNING id, name, created_at, updated_at
`

type CreateLocationParams struct {
	ID   string      `db:"id" json:"id"`
	Name pgtype.Text `db:"name" json:"name"`
}

func (q *Queries) CreateLocation(ctx context.Context, arg *CreateLocationParams) (*Location, error) {
	row := q.db.QueryRow(ctx, createLocation, arg.ID, arg.Name)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteLocation = `-- name: DeleteLocation :one
DELETE FROM locations WHERE id = $1 RETURNING id, name, created_at, updated_at
`

func (q *Queries) DeleteLocation(ctx context.Context, id string) (*Location, error) {
	row := q.db.QueryRow(ctx, deleteLocation, id)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getLocation = `-- name: GetLocation :one
SELECT id, name, created_at, updated_at FROM locations WHERE id = $1
`

func (q *Queries) GetLocation(ctx context.Context, id string) (*Location, error) {
	row := q.db.QueryRow(ctx, getLocation, id)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getLocations = `-- name: GetLocations :many
SELECT id, name, created_at, updated_at FROM locations
`

func (q *Queries) GetLocations(ctx context.Context) ([]*Location, error) {
	rows, err := q.db.Query(ctx, getLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Location{}
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLocation = `-- name: UpdateLocation :one
UPDATE locations SET name = $2 WHERE id = $1 RETURNING id, name, created_at, updated_at
`

type UpdateLocationParams struct {
	ID   string      `db:"id" json:"id"`
	Name pgtype.Text `db:"name" json:"name"`
}

func (q *Queries) UpdateLocation(ctx context.Context, arg *UpdateLocationParams) (*Location, error) {
	row := q.db.QueryRow(ctx, updateLocation, arg.ID, arg.Name)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
