// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: devices.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices (id, location_id, name, type, version) VALUES ($1, $2, $3, $4, $5) RETURNING id, location_id, name, type, version, created_at, updated_at
`

type CreateDeviceParams struct {
	ID         string      `db:"id" json:"id"`
	LocationID pgtype.Text `db:"location_id" json:"location_id"`
	Name       pgtype.Text `db:"name" json:"name"`
	Type       DeviceType  `db:"type" json:"type"`
	Version    string      `db:"version" json:"version"`
}

func (q *Queries) CreateDevice(ctx context.Context, arg *CreateDeviceParams) (*Device, error) {
	row := q.db.QueryRow(ctx, createDevice,
		arg.ID,
		arg.LocationID,
		arg.Name,
		arg.Type,
		arg.Version,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.Name,
		&i.Type,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteDevice = `-- name: DeleteDevice :one
DELETE FROM devices WHERE id = $1 RETURNING id, location_id, name, type, version, created_at, updated_at
`

func (q *Queries) DeleteDevice(ctx context.Context, id string) (*Device, error) {
	row := q.db.QueryRow(ctx, deleteDevice, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.Name,
		&i.Type,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getDevice = `-- name: GetDevice :one
SELECT id, location_id, name, type, version, created_at, updated_at FROM devices WHERE id = $1
`

func (q *Queries) GetDevice(ctx context.Context, id string) (*Device, error) {
	row := q.db.QueryRow(ctx, getDevice, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.Name,
		&i.Type,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getDevices = `-- name: GetDevices :many
SELECT id, location_id, name, type, version, created_at, updated_at FROM devices
`

func (q *Queries) GetDevices(ctx context.Context) ([]*Device, error) {
	rows, err := q.db.Query(ctx, getDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Device{}
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.LocationID,
			&i.Name,
			&i.Type,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDevice = `-- name: UpdateDevice :one
UPDATE devices SET location_id = $2, name = $3, type = $4, version = $5 WHERE id = $1 RETURNING id, location_id, name, type, version, created_at, updated_at
`

type UpdateDeviceParams struct {
	ID         string      `db:"id" json:"id"`
	LocationID pgtype.Text `db:"location_id" json:"location_id"`
	Name       pgtype.Text `db:"name" json:"name"`
	Type       DeviceType  `db:"type" json:"type"`
	Version    string      `db:"version" json:"version"`
}

func (q *Queries) UpdateDevice(ctx context.Context, arg *UpdateDeviceParams) (*Device, error) {
	row := q.db.QueryRow(ctx, updateDevice,
		arg.ID,
		arg.LocationID,
		arg.Name,
		arg.Type,
		arg.Version,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.Name,
		&i.Type,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
